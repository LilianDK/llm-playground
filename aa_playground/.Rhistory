vector = rbind(vector, tokens)
colnames(df) = c("segment","from","to","text","tokens")
}
tokens = count_tokens(df[1,4])
tokens
View(df)
vector = data.frame(matrix(nrow = 0, ncol = 1))
tokens = count_tokens(df[1,4])
tokens
vector = rbind(vector, tokens)
View(vector)
tokens = count_tokens(df[2,4])
tokens
vector = rbind(vector, tokens)
for (x in 1:nrow(df)) {
tokens = count_tokens(df[x,4])
tokens
vector = rbind(vector, tokens)
}
vector = data.frame(matrix(nrow = 0, ncol = 1))
for (x in 1:nrow(df)) {
tokens = count_tokens(df[x,4])
tokens
vector = rbind(vector, tokens)
}
df = cbind(df, vector)
colnames(df) = c("segment","from","to","text","tokens")
token ="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo0MjcyLCJ0b2tlbl9pZCI6MzE1Nn0.5Q_Ivbk_AHSt0NmXbnG-QmGmz86xaMQ9tgylhKqVsQA"
string = ""
for (x in 1:nrow(df)) {
string = glue("{string}{df[x,4]}")
}
if (sum(df[,5]) <= 2048) then {
if (sum(df[,5]) <= 2048) {
summary = summary(token, string)
}
summary
source_python("api_clients/aa_summarization.py")
if (sum(df[,5]) <= 2048) {
summary = summary(token, string)
}
summary
string
token ="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo0MjcyLCJ0b2tlbl9pZCI6MzE1Nn0.5Q_Ivbk_AHSt0NmXbnG-QmGmz86xaMQ9tgylhKqVsQA"
if (sum(df[,5]) <= 2048) {
summary = summary(token, string)
}
summary
summary = summary(token, string)
source_python("api_clients/aa_summarization.py")
summary = summary(token, string)
summary
string
View(df)
string
for (x in 3:nrow(df)) {
string = glue("{string}{df[x,4]}")
}
source_python("api_clients/aa_summarization.py")
if (sum(df[,5]) <= 2048) {
summary = summary(token, string)
}
summary
string
summary
document = string
summary = summary(token, document)
source_python("api_clients/aa_summarization.py")
document = string
summary = summary(token, document)
summary
source_python("api_clients/aa_summarization.py")
document = string
summary = summary(token, document)
summary
summary
runApp()
shiny::runApp()
x = "0.wav"
x = typeof("www/0.wav")
typeof("www/0.wav")
str_detect("www/0.wav", ".pdf", negate = FALSE)
library(stringr)
str_detect("www/0.wav", ".pdf", negate = FALSE)
library(glue)
library(glue)
library(DT)
library(pdftools)
shiny::runApp()
renv::status()
renv::snapshot()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
renv::snapshot()
shiny::runApp()
shiny::runApp()
runApp()
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools",
"knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools",
"av")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# part of the functionalities
library(shiny)
library(shinyWidgets)
library(bslib)
library(thematic)
library(reticulate)
library(TheOpenAIR)
library(glue)
library(DT)
library(pdftools)
library(rmarkdown)
library(markdown)
library(shinycssloaders)
library(gridlayout) # DOCUMENTATION
library(av)
library(stringr)
library(audio.whisper)
whispermodel <- whisper("tiny")
# part of debugging
library(reactlog)
options(shiny.reactlog = TRUE)
if (local_development) {
# Creating virtual pyenv
virtualenv_create("py_backend", python=virtualenv_starter(version = "3.11"))
use_virtualenv("py_backend")
virtualenv_install("py_backend", c("aleph-alpha-client", "Jinja2"))
} else {
install_python(version = "3.11:latest", list = FALSE, force = FALSE)
}
# Installation of R packages ---------------------------------------------------
print("START: Installation of R packages----------------------------------------")
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools",
"knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools",
"av")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# remotes::install_github("dreamRs/shinyWidgets")
# devtools::install_github("rstudio/gridlayout")
# remotes::install_github("bnosac/audio.whisper", ref = "0.2.1-1")
print("END: Installation of R packages------------------------------------------")
# Loading R libraries ----------------------------------------------------------
# part of the functionalities
library(shiny)
library(shinyWidgets)
library(bslib)
library(thematic)
library(reticulate)
library(TheOpenAIR)
library(glue)
library(DT)
library(pdftools)
library(rmarkdown)
library(markdown)
library(shinycssloaders)
library(gridlayout) # DOCUMENTATION
library(av)
library(stringr)
library(audio.whisper)
whispermodel <- whisper("tiny")
# part of debugging
library(reactlog)
options(shiny.reactlog = TRUE)
# Initializing PYENV -----------------------------------------------------------
# Required if local development environment has to be set
print("START: Initializing PYENV------------------------------------------------")
local_development = TRUE
if (local_development) {
# Creating virtual pyenv
virtualenv_create("py_backend", python=virtualenv_starter(version = "3.11"))
use_virtualenv("py_backend")
virtualenv_install("py_backend", c("aleph-alpha-client", "Jinja2"))
print("INITIALIZED VIRTUAL PYTHON ENVIRONMENT.")
} else {
install_python(version = "3.11:latest", list = FALSE, force = FALSE)
print("PYTHON INSTALLED IN VIRTUAL ENVIRONMENT.")
}
# Install python packages ------------------------------------------------------
print("START: Install python packages-------------------------------------------")
py_install("aleph-alpha-client")
py_install("Jinja2")
py_install("numpy")
py_install("rpy2")
py_install("markdown")
print("END: Install python packages---------------------------------------------")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
renv::snapshot()
shiny::runApp()
shiny::runApp()
reticulate::py_last_error()
reticulate::py_last_error()
shiny::runApp()
# Installation of R packages ---------------------------------------------------
print("START: Installation of R packages----------------------------------------")
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools",
"knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools",
"av")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# remotes::install_github("dreamRs/shinyWidgets")
# devtools::install_github("rstudio/gridlayout")
# remotes::install_github("bnosac/audio.whisper", ref = "0.2.1-1")
print("END: Installation of R packages------------------------------------------")
# Loading R libraries ----------------------------------------------------------
# part of the functionalities
library(shiny)
library(shinyWidgets)
library(bslib)
library(thematic)
library(reticulate)
library(TheOpenAIR)
library(glue)
library(DT)
library(pdftools)
library(rmarkdown)
library(markdown)
library(shinycssloaders)
library(gridlayout) # DOCUMENTATION
library(av)
library(stringr)
library(audio.whisper)
print("START: Loading whisper model---------------------------------------------")
whispermodel <- whisper("tiny")
# whispermodel <- whisper("base")
# whispermodel <- whisper("small")
# whispermodel <- whisper("medium")
# whispermodel <- whisper("large")
print("END: Loading whisper model----------------------------------------------")
# part of debugging
library(reactlog)
options(shiny.reactlog = TRUE)
# Initializing PYENV -----------------------------------------------------------
# Required if local development environment has to be set
print("START: Initializing PYENV------------------------------------------------")
local_development = TRUE
if (local_development) {
# Creating virtual pyenv
virtualenv_create("py_backend", python=virtualenv_starter(version = "3.11"))
use_virtualenv("py_backend")
virtualenv_install("py_backend", c("aleph-alpha-client", "Jinja2"))
print("INITIALIZED VIRTUAL PYTHON ENVIRONMENT.")
} else {
install_python(version = "3.11:latest", list = FALSE, force = FALSE)
print("PYTHON INSTALLED IN VIRTUAL ENVIRONMENT.")
}
print("END: Initializing PYENV--------------------------------------------------")
# Install python packages ------------------------------------------------------
print("START: Install python packages-------------------------------------------")
py_install("aleph-alpha-client")
py_install("Jinja2")
py_install("numpy")
py_install("rpy2")
py_install("markdown")
print("END: Install python packages---------------------------------------------")
# processing of non-PDF file
df = data.frame(matrix(nrow = 0, ncol = 4))
# transcripe audio file
av_audio_convert("www/0.mp4", output = "www/output.wav", format = "wav", sample_rate = 16000)
transcript = predict(whispermodel, "www/output.wav")
# data preparation
col1 = as.data.frame(transcript$data$segment)
col2 = as.data.frame(transcript$data$from)
col3 = as.data.frame(transcript$data$to)
col4 = as.data.frame(transcript$data$text)
df = cbind(col1,col2,col3,col4)
df = df[!duplicated(df[,4]),]
vector = data.frame(matrix(nrow = 0, ncol = 1))
for (x in 1:nrow(df)) {
tokens = count_tokens(df[x,4])
tokens
vector = rbind(vector, tokens)
}
df = cbind(df, vector)
colnames(df) = c("segment","from","to","text","tokens")
string = ""
for (x in 3:nrow(df)) {
string = glue("{string}{df[x,4]}")
}
string
typeof(string)
if (sum(df[,5]) <= 2048) {
document = as.character(string)
summary = summary(input$token, document)
summary
} else {
summary = "File too large."
summary
}
if (sum(df[,5]) <= 2048) {
document = as.character(string)
summary = summary("eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo0MjcyLCJ0b2tlbl9pZCI6MzE5NH0.dG7uigQtziQVpLlQdOYUg29TxgwbNl-yYXaU9iC1amA", document)
summary
} else {
summary = "File too large."
summary
}
document = as.character(string)
summary = summary("eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo0MjcyLCJ0b2tlbl9pZCI6MzE5NH0.dG7uigQtziQVpLlQdOYUg29TxgwbNl-yYXaU9iC1amA", document)
source_python("api_clients/aa_summarization.py")
# Installation of R packages ---------------------------------------------------
print("START: Installation of R packages----------------------------------------")
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools",
"knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools",
"av")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# remotes::install_github("dreamRs/shinyWidgets")
# devtools::install_github("rstudio/gridlayout")
# remotes::install_github("bnosac/audio.whisper", ref = "0.2.1-1")
print("END: Installation of R packages------------------------------------------")
# Loading R libraries ----------------------------------------------------------
# part of the functionalities
library(shiny)
library(shinyWidgets)
library(bslib)
library(thematic)
library(reticulate)
library(TheOpenAIR)
library(glue)
library(DT)
library(pdftools)
library(rmarkdown)
library(markdown)
library(shinycssloaders)
library(gridlayout) # DOCUMENTATION
library(av)
library(stringr)
library(audio.whisper)
print("START: Loading whisper model---------------------------------------------")
whispermodel <- whisper("tiny")
# whispermodel <- whisper("base")
# whispermodel <- whisper("small")
# whispermodel <- whisper("medium")
# whispermodel <- whisper("large")
print("END: Loading whisper model----------------------------------------------")
# part of debugging
library(reactlog)
options(shiny.reactlog = TRUE)
# Initializing PYENV -----------------------------------------------------------
# Required if local development environment has to be set
print("START: Initializing PYENV------------------------------------------------")
local_development = TRUE
if (local_development) {
# Creating virtual pyenv
virtualenv_create("py_backend", python=virtualenv_starter(version = "3.11"))
use_virtualenv("py_backend")
virtualenv_install("py_backend", c("aleph-alpha-client", "Jinja2"))
print("INITIALIZED VIRTUAL PYTHON ENVIRONMENT.")
} else {
install_python(version = "3.11:latest", list = FALSE, force = FALSE)
print("PYTHON INSTALLED IN VIRTUAL ENVIRONMENT.")
}
print("END: Initializing PYENV--------------------------------------------------")
# Install python packages ------------------------------------------------------
print("START: Install python packages-------------------------------------------")
py_install("aleph-alpha-client")
py_install("Jinja2")
py_install("numpy")
py_install("rpy2")
py_install("markdown")
print("END: Install python packages---------------------------------------------")
source_python("api_clients/aa_chat.py")
source_python("api_clients/aa_client.py")
source_python("api_clients/aa_qna.py")
source_python("api_clients/aa_semantic_search_inmemo.py")
source_python("api_clients/aa_summarization.py")
source_python("api_clients/aa_entityextraction.py")
# processing of non-PDF file
df = data.frame(matrix(nrow = 0, ncol = 4))
# transcripe audio file
av_audio_convert("www/0.mp4", output = "www/output.wav", format = "wav", sample_rate = 16000)
transcript = predict(whispermodel, "www/output.wav")
# data preparation
col1 = as.data.frame(transcript$data$segment)
col2 = as.data.frame(transcript$data$from)
col3 = as.data.frame(transcript$data$to)
col4 = as.data.frame(transcript$data$text)
df = cbind(col1,col2,col3,col4)
df = df[!duplicated(df[,4]),]
vector = data.frame(matrix(nrow = 0, ncol = 1))
for (x in 1:nrow(df)) {
tokens = count_tokens(df[x,4])
tokens
vector = rbind(vector, tokens)
}
df = cbind(df, vector)
colnames(df) = c("segment","from","to","text","tokens")
string = ""
for (x in 3:nrow(df)) {
string = glue("{string}{df[x,4]}")
}
typeof(string)
document = as.character(string)
summary = summary("eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo0MjcyLCJ0b2tlbl9pZCI6MzE5NH0.dG7uigQtziQVpLlQdOYUg29TxgwbNl-yYXaU9iC1amA", document)
summary
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# Installation of R packages ---------------------------------------------------
print("START: Installation of R packages----------------------------------------")
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools",
"knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools",
"av",
"zip","xopen","whisker","waldo","usethis","urlchecker","textshaping","testthat",
"systemfonts","sessioninfo","rversions","roxygen2","remotes","rematch2","rcmdcheck",
"ragg","purrr","ps","profvis","processx","prettyunits","praise","pkload","pkgdown",
"pkgbuild","miniUI","ini","httr2","gitcreds","gh","gert","downlit","diffobj","desc",
"credentials","cpp11","clipr","callr","brio","brew")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools",
"knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools",
"av",
"zip","xopen","whisker","waldo","usethis","urlchecker","textshaping","testthat",
"systemfonts","sessioninfo","rversions","roxygen2","remotes","rematch2","rcmdcheck",
"ragg","purrr","ps","profvis","processx","prettyunits","praise","pkgload","pkgdown",
"pkgbuild","miniUI","ini","httr2","gitcreds","gh","gert","downlit","diffobj","desc",
"credentials","cpp11","clipr","callr","brio","brew")
installed_packages <- packages %in% rownames(installed.packages())
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools",
"knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools",
"av",
"zip","xopen","whisker","waldo","usethis","urlchecker","textshaping","testthat",
"systemfonts","sessioninfo","rversions","roxygen2","remotes","rematch2","rcmdcheck",
"ragg","purrr","ps","profvis","processx","prettyunits","praise","pkgload","pkgdown",
"pkgbuild","miniUI","ini","httr2","gitcreds","gh","gert","downlit","diffobj","desc",
"credentials","cpp11","clipr","callr","brio","brew")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Installation of R packages ---------------------------------------------------
print("START: Installation of R packages----------------------------------------")
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools",
"knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools",
"av",
"zip","xopen","whisker","waldo","usethis","urlchecker","textshaping","testthat",
"systemfonts","sessioninfo","rversions","roxygen2","remotes","rematch2","rcmdcheck",
"ragg","purrr","ps","profvis","processx","prettyunits","praise","pkgload","pkgdown",
"pkgbuild","miniUI","ini","httr2","gitcreds","gh","gert","downlit","diffobj","desc",
"credentials","cpp11","clipr","callr","brio","brew")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
renv::status()
# Loading R libraries ----------------------------------------------------------
# part of the functionalities
install.packages("shiny")
renv::status()
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools",
"knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools",
"av",
"zip","xopen","whisker","waldo","usethis","urlchecker","textshaping","testthat",
"systemfonts","sessioninfo","rversions","roxygen2","remotes","rematch2","rcmdcheck",
"ragg","purrr","ps","profvis","processx","prettyunits","praise","pkgload","pkgdown",
"pkgbuild","miniUI","ini","httr2","gitcreds","gh","gert","downlit","diffobj","desc",
"credentials","cpp11","clipr","callr","brio","brew")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Loading R libraries ----------------------------------------------------------
# part of the functionalities
library(zip)
renv::status()
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools",
"knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools",
"av", "zip","xopen","whisker","waldo","usethis","urlchecker","textshaping","testthat",
"systemfonts","sessioninfo","rversions","roxygen2","remotes","rematch2","rcmdcheck",
"ragg","purrr","ps","profvis","processx","prettyunits","praise","pkgload","pkgdown",
"pkgbuild","miniUI","ini","httr2","gitcreds","gh","gert","downlit","diffobj","desc",
"credentials","cpp11","clipr","callr","brio","brew")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
