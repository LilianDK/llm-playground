library(glue)
library(DT)
library(pdftools)
library(rmarkdown)
library(shinycssloaders)
library(reactlog)
#install_python(version = "3.11:latest", list = FALSE, force = FALSE)
if (local_development) {
# Put the path to your python environment here
use_python("/Users/lilian.do-khac/.pyenv/versions/3.11.4/bin/python")
}
py_install("aleph-alpha-client")
py_install("Jinja2")
py_install("numpy")
py_install("rpy2")
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
options(shiny.reactlog = TRUE)
runApp()
options(shiny.reactlog = TRUE)
# tell shiny to log all reactivity
options(shiny.reactlog = TRUE)
shiny::runApp()
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools","knitr","rmarkdown","remotes","shinycssloaders","reactlog","profvis")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
p
shiny::runApp()
shiny::runApp()
# Load PDF file and parse ------------------------------------------------------
pdf_file = "www/dp.pdf"
txt = pdf_text(pdf_file)
txt
shiny::runApp()
txt
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
reticulate::repl_python()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# Required if local development environment has to be set due to reticulate having issues to find the right path
local_development = TRUE
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools","knitr","rmarkdown","remotes","shinycssloaders","reactlog")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# remotes::install_github("dreamRs/shinyWidgets")
# part of the functionalities
library(shiny)
library(shinyWidgets)
library(bslib)
library(thematic)
library(reticulate)
library(TheOpenAIR)
library(glue)
library(DT)
library(pdftools)
library(rmarkdown)
library(shinycssloaders)
# part of debugging
library(reactlog)
options(shiny.reactlog = TRUE)
#install_python(version = "3.11:latest", list = FALSE, force = FALSE)
if (local_development) {
# Put the path to your python environment here
use_python("/Users/lilian.do-khac/.pyenv/versions/3.11.4/bin/python")
}
py_install("aleph-alpha-client")
py_install("Jinja2")
py_install("numpy")
source_python("api_clients/aa_entityextraction.py")
# Load PDF file and parse ------------------------------------------------------
pdf_file = "www/dp.pdf"
txt = pdf_text(pdf_file)
document = txt[1] # select the page you want to summarize
document
namedentity1="Auftragsnummer"
namedentity2="Betrag"
namedentity3="Rechnungsdatum"
entityextraction = entityextraction(token, document, namedentity1, namedentity2, namedentity3)
token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo0MjcyLCJ0b2tlbl9pZCI6MzE0NH0.D-9yN0_m9MCn9uVTxUyJoRTJTRMSKQ9gqmGAZ9uOHAs"
namedentity1="Auftragsnummer"
namedentity2="Betrag"
namedentity3="Rechnungsdatum"
entityextraction = entityextraction(token, document, namedentity1, namedentity2, namedentity3)
entityextraction
lengths(regmatches(entityextraction, gregexpr("|", entityextraction)))
lengths(regmatches(entityextraction, gregexpr("\n", entityextraction)))
sub(" \n.*", "", entityextraction)
test = sub(" \n.*", "", entityextraction)
test
test = sub(" .*\n", "", entityextraction)
test
test = sub(" .*|\n", "", entityextraction)
test
typeof(entityextraction)
test = sub(" .*|", "", entityextraction)
test
test = sub(" .*|", "", entityextraction)
test
test = sub(" .*Auftragsnummer", "", entityextraction)
test
sapply(strsplit(entityextraction, ":"), "|", 2)
substring(entityextraction, regexpr("|", string) + 1)
substring(entityextraction, regexpr("|", entityextraction) + 1)
substring(entityextraction, regexpr("\n", entityextraction) + 1)
test = substring(entityextraction, regexpr("\n", entityextraction) + 1)
tet
test
test = substring(entityextraction, regexpr("\n", entityextraction) - 1)
test
test = substring(entityextraction, regexpr("\n", entityextraction) - 10)
test
substr(entityextraction,0,10)
substr(entityextraction,0,regexpr("\n", entityextraction))
substr(entityextraction,0,regexpr("\n", entityextraction)-2)
substr(entityextraction,regexpr("\n", entityextraction),regexpr("\n", entityextraction)-2)
result1 = substr(entityextraction,0,regexpr("\n", entityextraction)-2)
length(result1)
nchar(result1)
substr(entityextraction,nchar(result1),regexpr("\n", entityextraction)-2)
substr(entityextraction,nchar(result1)+2,regexpr("\n", entityextraction)-2)
substr(entityextraction,nchar(result1)+3,regexpr("\n", entityextraction)-2)
result 2 = gsub(substr(entityextraction,0,regexpr("\n", entityextraction)), '', entityextraction)
result2 = gsub(substr(entityextraction,0,regexpr("\n", entityextraction)), '', entityextraction)
result2
result1 = substr(entityextraction,0,regexpr("\n", entityextraction)-2)
test = substring(entityextraction, regexpr("\n", entityextraction) - 10)
test
result1 = substr(entityextraction,0,regexpr("\n", entityextraction)-2)
result1
result2 = gsub(substr(entityextraction,0,nchar(result1)), '', entityextraction)
result2
result2 = gsub(substr(entityextraction,0,nchar(result1)+2), '', entityextraction)
result2
result2 = gsub(substr(entityextraction,0,nchar(result1)+1), '', entityextraction)
result2
result2 = gsub(substr(entityextraction,0,nchar(result1)+3), '', entityextraction)
result2
result2 = gsub(substr(entityextraction,0,nchar(result1)+5), '', entityextraction)
result2
entityextraction = entityextraction(token, document, namedentity1, namedentity2, namedentity3)
source_python("api_clients/aa_entityextraction.py")
entityextraction = entityextraction(token, document, namedentity1, namedentity2, namedentity3)
entityextraction
result1 = substr(entityextraction,0,regexpr("\n", entityextraction)-2)
result1
entityextraction
source_python("api_clients/aa_entityextraction.py")
entityextraction = entityextraction(token, document, namedentity1, namedentity2, namedentity3)
entityextraction
source_python("api_clients/aa_entityextraction.py")
entityextraction = entityextraction(token, document, namedentity1, namedentity2, namedentity3)
entityextraction
source_python("api_clients/aa_entityextraction.py")
entityextraction = entityextraction(token, document, namedentity1, namedentity2, namedentity3)
entityextraction
entityextraction
source_python("api_clients/aa_entityextraction.py")
entityextraction = entityextraction(token, document, namedentity1, namedentity2, namedentity3)
entityextraction
source_python("api_clients/aa_entityextraction.py")
entityextraction = entityextraction(token, document, namedentity1, namedentity2, namedentity3)
entityextraction
source_python("api_clients/aa_entityextraction.py")
entityextraction = entityextraction(token, document, namedentity1, namedentity2, namedentity3)
entityextraction
source_python("api_clients/aa_entityextraction.py")
entityextraction = entityextraction(token, document, namedentity1, namedentity2, namedentity3)
entityextraction
result1 = substr(entityextraction,0,regexpr("\n", entityextraction)-2)
result1
nchar(result1)
result2 = gsub(substr(entityextraction,0,nchar(result1)+2), '', entityextraction)
result2
substr(result2,nchar(result1)+2,regexpr("\n", result2)-2)
result3 = substr(result2,nchar(result1)+2,regexpr("\n", result2)-2)
result3
result2
result3 = substr(result2,0,regexpr("\n", result2)-2)
result3
result1 = substr(entityextraction,0,regexpr("\n", entityextraction)-2)
result1
nchar(result1)
result2 = gsub(substr(entityextraction,0,nchar(result1)+2), '', entityextraction)
result2
result2 = substr(result2,0,regexpr("\n", result2)-2)
result2
nchar(result2)
result3 = substr(entityextraction,nchar(result1)+nchar(result2),regexpr("\n", result2)-2)
result3
result3 = substr(entityextraction,nchar(result1)+nchar(result2),regexpr("\n", entityextraction))
result3
result1 = substr(entityextraction,0,regexpr("\n", entityextraction)-2)
result1
nchar(result1)
result2 = gsub(substr(entityextraction,0,nchar(result1)+2), '', entityextraction)
result2
result3 = gsub(substr(entityextraction,nchar(result1),nchar(result1)+2), '', entityextraction)
result3
entityextraction
result3 = gsub(substr(entityextraction,nchar(result1),nchar(entityextraction)), '', entityextraction)
result3
nchar(entityextraction)
nchar(result1)
result3 = substr(entityextraction,nchar(result1),nchar(entityextraction))
result3
result3 = substr(entityextraction,nchar(result1)+nchar(result2),nchar(entityextraction))
result3
result3 = substr(entityextraction,nchar(result2),nchar(entityextraction))
result3
nchar(result2)
result2
result3 = substr(entityextraction,nchar(result2)-nchar(result1),nchar(entityextraction))
result3
result3 = substr(entityextraction,nchar(result1),nchar(entityextraction))
result3
result1 = substr(entityextraction,0,regexpr("\n", entityextraction)-2)
result1
entityextraction
entityextraction = entityextraction(token, document, namedentity1, namedentity2, namedentity3)
entityextraction
result1 = substr(entityextraction,0,regexpr("\n", entityextraction)-2)
result1
nchar(result1)
result2 = gsub(substr(entityextraction,0,nchar(result1)+2), '', entityextraction)
result2
result2 = substr(result2,0,regexpr("\n", result2)-2)
result2
nchar(result2)
result3 = substr(entityextraction,nchar(result1),nchar(entityextraction))
result3
result1 = substr(entityextraction,0,regexpr("\n", entityextraction)-1)
result1
nchar(result1)
result2 = gsub(substr(entityextraction,0,nchar(result1)+2), '', entityextraction)
result2
result2 = substr(result2,0,regexpr("\n", result2)-2)
result2
nchar(result2)
result3 = substr(entityextraction,nchar(result1),nchar(entityextraction))
result3
entityextraction
nchar(result1)+1
result3 = substr(entityextraction,nchar(result1),nchar(entityextraction))
result3
result3 = substr(entityextraction,nchar(result1)+1,nchar(entityextraction))
result3
result3 = substr(entityextraction,nchar(result1)+2,nchar(entityextraction))
result3
result3 = substr(entityextraction,nchar(result1)+2+nchar(result2),nchar(entityextraction))
result3
result3 = substr(entityextraction,nchar(result1)+2+nchar(result2)+2,nchar(entityextraction))
result3
result3 = substr(entityextraction,nchar(result1)+2+nchar(result2)+3,nchar(entityextraction))
result3
result1 = substr(entityextraction,0,regexpr("\n", entityextraction)-1)
result1
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
# OUTPUT VARIABLES
# "pdfview3" for display of PDF upload
# "entityextraction" for display extracted entities
# INPUT VARIABLES
# "file_input3" for uploading a PDF
# "namedentity1" for named entity recognition
# "namedentity2" for named entity recognition
# "namedentity3" for named entity recognition
# EVENT VARIABLES
# "button5" for uploading a PDF
documentprocessing =     nav_panel(title = "Document processing",
fluidRow(
column(width = 8,
card(min_height = 100,
card_header("PDF:"),
uiOutput("pdfview3"),
fileInput("file_input3", "upload file ( . pdf format only)", accept = c(".pdf"))
)
),
column(width = 4,
card(min_height = 100,
h5("Machine generated answer:"),
shinycssloaders::withSpinner(
textOutput("namedentity1o")#,
#textOutput("namedentity2o"),
#textOutput("namedentity3o")
),
card_header("Your requested variables:"),
textAreaInput("namedentity1", "", height = "50px", width = "300px"),
textAreaInput("namedentity2", "", height = "50px", width = "300px"),
textAreaInput("namedentity3", "", height = "50px", width = "300px"),
actionButton("button10", "Request Answer", icon("paper-plane"), style = config_button, width = "230px")
)
)
),
fluidRow(
card(
card_header("Estimated cost calcuations (EUR):"),
fluidRow(
column(width = 3,
h6("Est. cost to process the file:"), textOutput("text_prompt22")
),
column(width = 3,
h6("Est. cost to answer generation:"), textOutput("text_prompt23")
)
)
)
)
)
runApp()
shiny::runApp()
shiny::runApp()
result1 = substr(entityextraction,0,regexpr("\n", entityextraction)-1)
result1
nchar(result1)
result2 = gsub(substr(entityextraction,0,nchar(result1)+2), '', entityextraction)
result2
result2 = substr(result2,0,regexpr("\n", result2)-2)
result2
nchar(result2)
result3 = substr(entityextraction,nchar(result1)+2+nchar(result2)+3,nchar(entityextraction))
result3
entityextraction = entityextraction(token, document, namedentity1, namedentity2, namedentity3)
entityextraction
result1 = substr(entityextraction,0,regexpr("\n", entityextraction)-1)
result1
nchar(result1)
result2 = gsub(substr(entityextraction,0,nchar(result1)+2), '', entityextraction)
result2
result2 = gsub(substr(entityextraction,0,nchar(result1)+1), '', entityextraction)
result2
result2 = substr(result2,0,regexpr("\n", result2)-2)
result2
nchar(result2)
result3 = substr(entityextraction,nchar(result1)+2+nchar(result2)+3,nchar(entityextraction))
result3
result3 = substr(entityextraction,nchar(result1)+2+nchar(result2)+2,nchar(entityextraction))
result3
tbl = data.frame(matrix(nrow = 0, ncol = 3))
colnames(tbl) = c("Document ID",namedentity1,namedentity2,namedentity3)
colnames(tbl) = c("Document ID","namedentity1","namedentity2","namedentity3")
tbl = data.frame(matrix(nrow = 0, ncol = 4))
colnames(tbl) = c("Document ID",namedentity1,namedentity2,namedentity3)
tbl
gsub("\\:*","",result3)
s<-gsub(":.*","",result3)
s
s<-gsub(".*:","",result3)
s
s<-trimws(gsub(".*:","",result3))
s
tbl[1,2]<-trimws(gsub(".*:","",result3))
tbl
tbl[1,2]<-trimws(gsub(".*:","",result1))
tbl
tbl[1,2]<-trimws(gsub(".*:","",result1))
tbl[1,3]<-trimws(gsub(".*:","",result2))
tbl[1,4]<-trimws(gsub(".*:","",result3))
tbl
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
renv::snapshot()
library(markdown)
renv::snapshot()
# Required if local development environment has to be set due to reticulate having issues to find the right path
local_development = FALSE
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools","knitr","rmarkdown","remotes","shinycssloaders","reactlog")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# remotes::install_github("dreamRs/shinyWidgets")
# part of the functionalities
library(shiny)
library(shinyWidgets)
library(bslib)
library(thematic)
library(reticulate)
library(TheOpenAIR)
library(glue)
library(DT)
library(pdftools)
library(rmarkdown)
library(markdown)
library(shinycssloaders)
# part of debugging
library(reactlog)
renv::status()
# remotes::install_github("dreamRs/shinyWidgets")#
devtools::install_github("rstudio/gridlayout")
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools","knitr","rmarkdown","remotes","shinycssloaders","reactlog","devtools")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# remotes::install_github("dreamRs/shinyWidgets")
devtools::install_github("rstudio/gridlayout")
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools","knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
install.packages("markdown")
# part of the functionalities
library(shiny)
library(shinyWidgets)
library(bslib)
library(thematic)
library(reticulate)
library(TheOpenAIR)
library(glue)
library(DT)
library(pdftools)
library(rmarkdown)
library(markdown)
library(shinycssloaders)
library(gridlayout)
renv::snapshot()
runApp()
runApp()
# Required if local development environment has to be set due to reticulate having issues to find the right path
local_development = TRUE
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools","knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# part of the functionalities
library(shiny)
library(shinyWidgets)
library(bslib)
library(thematic)
library(reticulate)
library(TheOpenAIR)
library(glue)
library(DT)
library(pdftools)
library(rmarkdown)
library(markdown)
library(shinycssloaders)
library(gridlayout)
# part of debugging
library(reactlog)
options(shiny.reactlog = TRUE)
#install_python(version = "3.11:latest", list = FALSE, force = FALSE)
if (local_development) {
# Put the path to your python environment here
use_python("/Users/lilian.do-khac/.pyenv/versions/3.11.4/bin/python")
}
shiny::runApp()
runApp()
shiny::runApp()
# Required if local development environment has to be set due to reticulate having issues to find the right path
local_development = TRUE
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools","knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# part of the functionalities
library(shiny)
library(shinyWidgets)
library(bslib)
library(thematic)
library(reticulate)
library(TheOpenAIR)
library(glue)
library(DT)
library(pdftools)
library(rmarkdown)
library(markdown)
library(shinycssloaders)
library(gridlayout)
# part of debugging
library(reactlog)
options(shiny.reactlog = TRUE)
#install_python(version = "3.11:latest", list = FALSE, force = FALSE)
if (local_development) {
# Put the path to your python environment here
use_python("/Users/lilian.do-khac/.pyenv/versions/3.11.4/bin/python")
}
py_install("aleph-alpha-client")
py_install("Jinja2")
py_install("numpy")
py_install("rpy2")
py_install("markdown")
renv::snapshot()
