transcript
transcript$text
transcript$tokens
transcript$data
transcript$data$text
# whispermodel <- whisper("tiny")
# whispermodel <- whisper("base")
# whispermodel <- whisper("small")
# whispermodel <- whisper("medium")
whispermodel <- whisper("large")
# whispermodel <- whisper("tiny")
# whispermodel <- whisper("base")
# whispermodel <- whisper("small")
whispermodel <- whisper("medium")
transcript = predict(whispermodel, "output.wav")
transcript$data$text
df = as.data.frame(transcript$data$text)
View(df)
df = as.data.frame(transcript$data$segment, transcript$data$from, transcript$data$to, transcript$data$text)
df = as.data.frame(c(transcript$data$segment, transcript$data$from, transcript$data$to, transcript$data$text))
View(df)
df = data.frame(matrix(nrow = 0, ncol = 4))
View(df)
df[,1] = transcript$data$segment
df[,1] = as.data.frame(transcript$data$segment)
a = as.data.frame(transcript$data$segment)
df[,1] = cbind(df,as.data.frame(transcript$data$segment))
df = data.frame(matrix(nrow = 105, ncol = 4))
df[,1] = cbind(df,as.data.frame(transcript$data$segment))
col1 = cbind(df,as.data.frame(transcript$data$segment))
col1 = cbind(df,as.data.frame(transcript$data$segment))
col2 = cbind(df,as.data.frame(transcript$data$from))
col3 = cbind(df,as.data.frame(transcript$data$to))
col4 = cbind(df,as.data.frame(transcript$data$text))
df = cbind(col1,col2,col3,col4)
View(df)
df = data.frame(matrix(nrow = 0, ncol = 4))
df = cbind(col1,col2,col3,col4)
View(col1)
col1 = as.data.frame(transcript$data$segment)
col2 = as.data.frame(transcript$data$from)
col3 = as.data.frame(transcript$data$to)
col4 = as.data.frame(transcript$data$text)
df = cbind(col1,col2,col3,col4)
View(df)
whispermodel <- whisper("tiny")
av_audio_convert("rant1.mp3", output = "output.wav", format = "wav", sample_rate = 16000)
download.file(url = "https://www.ubu.com/media/sound/dec_francis/Dec-Francis-E_rant1.mp3",
destfile = "rant1.mp3", mode = "wb")
av_audio_convert("rant1.mp3", output = "output.wav", format = "wav", sample_rate = 16000)
transcript = predict(whispermodel, "output.wav")
df = df[!duplicated(df)]
df = df[!duplicated(df[,4])]
df[,4]
df = df[!duplicated(df[,4])]
df = df[!duplicated(df[,4]),]
View(df)
lapply (x, count_tokens(df[,4]))
# Required if local development environment has to be set due to reticulate having issues to find the right path
local_development = TRUE
options(shiny.reactlog = TRUE)
#install_python(version = "3.11:latest", list = FALSE, force = FALSE)
if (local_development) {
# Put the path to your python environment here
use_python("/Users/lilian.do-khac/.pyenv/versions/3.11.4/bin/python")
}
# Required if local development environment has to be set due to reticulate having issues to find the right path
local_development = TRUE
#install_python(version = "3.11:latest", list = FALSE, force = FALSE)
if (local_development) {
# Put the path to your python environment here
use_python("/Users/lilian.do-khac/.pyenv/versions/3.11.4/bin/python")
}
# Required if local development environment has to be set due to reticulate having issues to find the right path
local_development = TRUE
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools",
"knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools",
"av")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# part of the functionalities
library(shiny)
library(shinyWidgets)
library(bslib)
library(thematic)
library(reticulate)
library(TheOpenAIR)
library(glue)
library(DT)
library(pdftools)
library(rmarkdown)
library(markdown)
library(shinycssloaders)
library(gridlayout)
library(audio.whisper)
whispermodel <- whisper("tiny")
lapply (x, count_tokens(df[,4]))
df[,4]
count_tokens(df[1,4])
lapply (df, count_tokens(df[1,4]))
lapply (df, count_tokens(df[,4]))
lapply (df[,4], count_tokens(df[,4]))
lapply (df[,4], count_tokens())
lapply (df[,4], count_tokens(df[,4]))
as.vector(df[,4])
lapply (a=as.vector(df[,4]), count_tokens(df[,4]))
a=as.vector(df[,4])
lapply (as.vector(df[,4]), count_tokens(df[,4]))
lapply (as.vector(df[,4]), count_tokens(as.vector(df[,4]))
test = lapply (as.vector(df[,4]), count_tokens(as.vector(df[,4]))
test = lapply(as.vector(df[,4]), count_tokens(as.vector(df[,4])))
test = lapply(as.vector(df[,4]), count_tokens(as.vector(df[,4])))
a = as.vector(df[,4])
test = lapply(a, count_tokens(a))
a = as.vector(df[,4])
atest = lapply(a, count_tokens(a))
a
test = lapply(a, count_tokens(a))
test = lapply(a, count_tokens(df[,4]))
test = lapply(df[,4], count_tokens(a))
test = lapply(df[,4], count_tokens())
test = lapply(a, count_tokens())
test = lapply(df[,4], count_tokens())
View(df)
test = lapply(df[,4], count_tokens(x))
test = tapply(a, count_tokens())
test = apply(a, count_tokens())
test = apply(a, 1,count_tokens())
test = apply(df, 4,count_tokens())
test = lapply(df, count_tokens())
a
View(df)
test = lapply(df[,4], count_tokens())
test = count_tokens(df[1,4])
test
test = count_tokens(df[2,4])
test
test2 = apply(df[,4], 1, count_tokens())
test2 = apply(df[,4], 1, count_tokens(df[,4]))
length(df)
nrow(df)
for (x in 1:nrow(df)) {
token = count_tokens(df[x,4])
tupel = as.integer(c(x, token))
df = rbind(df, tupel)
}
View(df)
df
for (x in 1:nrow(df)) {
token = count_tokens(df[x,4])
tupel = as.integer(c(x, token))
vector = rbind(df, tupel)
df
}
View(vector)
for (x in 1:nrow(df)) {
token = count_tokens(df[x,4])
tupel = as.integer(c(x, token))
vector = rbind(vector, tupel)
df
}
View(vector)
token = count_tokens(df[1,4])
token
vector = rbind(vector, token)
vector = ""
for (x in 1:nrow(df)) {
token = count_tokens(df[1,4])
vector = rbind(vector, token)
df
}
vector = ""
vector = ""
vector = ""
vector = ""
vector = data.frame(matrix(nrow = 0, ncol = 1))
for (x in 1:nrow(df)) {
token = count_tokens(df[x,4])
vector = rbind(vector, token)
vector
}
View(vector)
download.file(url = "https://www.ubu.com/media/sound/dec_francis/Dec-Francis-E_rant1.mp3",
destfile = "rant1.mp3", mode = "wb")
df = data.frame(matrix(nrow = 0, ncol = 4))
av_audio_convert("rant1.mp3", output = "output.wav", format = "wav", sample_rate = 16000)
# Required if local development environment has to be set due to reticulate having issues to find the right path
local_development = TRUE
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools",
"knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools",
"av")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# part of the functionalities
library(shiny)
library(shinyWidgets)
library(bslib)
library(thematic)
library(reticulate)
library(TheOpenAIR)
library(glue)
library(DT)
library(pdftools)
library(rmarkdown)
library(markdown)
library(shinycssloaders)
library(gridlayout)
library(audio.whisper)
whispermodel <- whisper("tiny")
library(av)
download.file(url = "https://www.ubu.com/media/sound/dec_francis/Dec-Francis-E_rant1.mp3",
destfile = "rant1.mp3", mode = "wb")
df = data.frame(matrix(nrow = 0, ncol = 4))
av_audio_convert("rant1.mp3", output = "output.wav", format = "wav", sample_rate = 16000)
transcript = predict(whispermodel, "output.wav")
col1 = as.data.frame(transcript$data$segment)
col2 = as.data.frame(transcript$data$from)
col3 = as.data.frame(transcript$data$to)
col4 = as.data.frame(transcript$data$text)
col1 = as.data.frame(transcript$data$segment)
col2 = as.data.frame(transcript$data$from)
col3 = as.data.frame(transcript$data$to)
col4 = as.data.frame(transcript$data$text)
df = cbind(col1,col2,col3,col4)
df = df[!duplicated(df[,4]),]
vector = data.frame(matrix(nrow = 0, ncol = 1))
for (x in 1:nrow(df)) {
token = count_tokens(df[x,4])
vector = rbind(vector, token)
vector
}
View(vector)
df = cbind(df, vector)
View(df)
df(colnames) = c("segment","from","to","text","tokens")
colnames(df) = colnames(c("segment","from","to","text","tokens"))
View(df)
colnames(df) = colnames(c("segment","from","to","text","tokens"))
View(df)
colnames(c("segment","from","to","text","tokens"))
colnames(df) = c("segment","from","to","text","tokens")
View(df)
apply(df,5,sum)
apply(df,1,sum)
apply(df[,5],sum)
sum(df[,5])
source_python("api_clients/aa_summarization.py")
# Required if local development environment has to be set due to reticulate having issues to find the right path
local_development = TRUE
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools",
"knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools",
"av")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# part of the functionalities
library(shiny)
library(shinyWidgets)
library(bslib)
library(thematic)
library(reticulate)
library(TheOpenAIR)
library(glue)
library(DT)
library(pdftools)
library(rmarkdown)
library(markdown)
library(shinycssloaders)
library(gridlayout)
library(audio.whisper)
whispermodel <- whisper("tiny")
library(av)
download.file(url = "https://www.ubu.com/media/sound/dec_francis/Dec-Francis-E_rant1.mp3",
destfile = "rant1.mp3", mode = "wb")
df = data.frame(matrix(nrow = 0, ncol = 4))
av_audio_convert("rant1.mp3", output = "output.wav", format = "wav", sample_rate = 16000)
transcript = predict(whispermodel, "output.wav")
col1 = as.data.frame(transcript$data$segment)
col1 = as.data.frame(transcript$data$segment)
col2 = as.data.frame(transcript$data$from)
col3 = as.data.frame(transcript$data$to)
col4 = as.data.frame(transcript$data$text)
df = cbind(col1,col2,col3,col4)
df = df[!duplicated(df[,4]),]
vector = data.frame(matrix(nrow = 0, ncol = 1))
for (x in 1:nrow(df)) {
token = count_tokens(df[x,4])
vector = rbind(vector, token)
df = cbind(df, vector)
colnames(df) = c("segment","from","to","text","tokens")
}
View(df)
df = data.frame(matrix(nrow = 0, ncol = 4))
col1 = as.data.frame(transcript$data$segment)
col2 = as.data.frame(transcript$data$from)
col3 = as.data.frame(transcript$data$to)
col4 = as.data.frame(transcript$data$text)
df = cbind(col1,col2,col3,col4)
df = df[!duplicated(df[,4]),]
for (x in 1:nrow(df)) {
token = count_tokens(df[x,4])
vector = rbind(vector, token)
df = cbind(df, vector)
colnames(df) = c("segment","from","to","text","tokens")
}
View(df)
source_python("api_clients/aa_summarization.py")
py_install("aleph-alpha-client")
py_install("Jinja2")
py_install("numpy")
py_install("rpy2")
py_install("markdown")
token ="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo0MjcyLCJ0b2tlbl9pZCI6MzE1Nn0.5Q_Ivbk_AHSt0NmXbnG-QmGmz86xaMQ9tgylhKqVsQA"
for (x in 1:nrow(df)) {
string = glue("{string}{df[x,4]}")
}
string = ""
for (x in 1:nrow(df)) {
string = glue("{string}{df[x,4]}")
}
string
summary = summary(token, string)
summary
source_python("api_clients/aa_summarization.py")
py_install("Jinja2")
source_python("api_clients/aa_summarization.py")
# Required if local development environment has to be set due to reticulate having issues to find the right path
local_development = TRUE
packages <- c("shiny","bslib","thematic","reticulate","TheOpenAIR","glue","DT","pdftools",
"knitr","rmarkdown","markdown","remotes","shinycssloaders","reactlog","devtools",
"av")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# part of the functionalities
library(shiny)
library(shinyWidgets)
library(bslib)
library(thematic)
library(reticulate)
library(TheOpenAIR)
library(glue)
library(DT)
library(pdftools)
library(rmarkdown)
library(markdown)
library(shinycssloaders)
library(gridlayout)
library(audio.whisper)
whispermodel <- whisper("tiny")
library(av)
download.file(url = "https://www.ubu.com/media/sound/dec_francis/Dec-Francis-E_rant1.mp3",
destfile = "rant1.mp3", mode = "wb")
#install_python(version = "3.11:latest", list = FALSE, force = FALSE)
if (local_development) {
# Put the path to your python environment here
use_python("/Users/lilian.do-khac/.pyenv/versions/3.11.4/bin/python")
}
py_install("aleph-alpha-client")
py_install("Jinja2")
py_install("numpy")
py_install("rpy2")
py_install("markdown")
library(av)
df = data.frame(matrix(nrow = 0, ncol = 4))
av_audio_convert("rant1.mp3", output = "output.wav", format = "wav", sample_rate = 16000)
transcript = predict(whispermodel, "output.wav")
col1 = as.data.frame(transcript$data$segment)
col2 = as.data.frame(transcript$data$from)
col3 = as.data.frame(transcript$data$to)
col4 = as.data.frame(transcript$data$text)
df = cbind(col1,col2,col3,col4)
df = df[!duplicated(df[,4]),]
vector = data.frame(matrix(nrow = 0, ncol = 1))
for (x in 1:nrow(df)) {
token = count_tokens(df[x,4])
vector = rbind(vector, token)
df = cbind(df, vector)
colnames(df) = c("segment","from","to","text","tokens")
}
View(df)
df = data.frame(matrix(nrow = 0, ncol = 4))
df = cbind(col1,col2,col3,col4)
df = df[!duplicated(df[,4]),]
vector = data.frame(matrix(nrow = 0, ncol = 1))
for (x in 1:nrow(df)) {
token = count_tokens(df[x,4])
vector = rbind(vector, token)
df = cbind(df, vector)
colnames(df) = c("segment","from","to","text","tokens")
}
for (x in 1:nrow(df)) {
tokens = count_tokens(df[x,4])
vector = rbind(vector, tokens)
df = cbind(df, vector)
colnames(df) = c("segment","from","to","text","tokens")
}
View(vector)
df = data.frame(matrix(nrow = 0, ncol = 4))
df = cbind(col1,col2,col3,col4)
df = df[!duplicated(df[,4]),]
vector = data.frame(matrix(nrow = 0, ncol = 1))
for (x in 1:nrow(df)) {
tokens = count_tokens(df[x,4])
vector = rbind(vector, tokens)
colnames(df) = c("segment","from","to","text","tokens")
}
tokens = count_tokens(df[1,4])
tokens
View(df)
vector = data.frame(matrix(nrow = 0, ncol = 1))
tokens = count_tokens(df[1,4])
tokens
vector = rbind(vector, tokens)
View(vector)
tokens = count_tokens(df[2,4])
tokens
vector = rbind(vector, tokens)
for (x in 1:nrow(df)) {
tokens = count_tokens(df[x,4])
tokens
vector = rbind(vector, tokens)
}
vector = data.frame(matrix(nrow = 0, ncol = 1))
for (x in 1:nrow(df)) {
tokens = count_tokens(df[x,4])
tokens
vector = rbind(vector, tokens)
}
df = cbind(df, vector)
colnames(df) = c("segment","from","to","text","tokens")
token ="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo0MjcyLCJ0b2tlbl9pZCI6MzE1Nn0.5Q_Ivbk_AHSt0NmXbnG-QmGmz86xaMQ9tgylhKqVsQA"
string = ""
for (x in 1:nrow(df)) {
string = glue("{string}{df[x,4]}")
}
if (sum(df[,5]) <= 2048) then {
if (sum(df[,5]) <= 2048) {
summary = summary(token, string)
}
summary
source_python("api_clients/aa_summarization.py")
if (sum(df[,5]) <= 2048) {
summary = summary(token, string)
}
summary
string
token ="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo0MjcyLCJ0b2tlbl9pZCI6MzE1Nn0.5Q_Ivbk_AHSt0NmXbnG-QmGmz86xaMQ9tgylhKqVsQA"
if (sum(df[,5]) <= 2048) {
summary = summary(token, string)
}
summary
summary = summary(token, string)
source_python("api_clients/aa_summarization.py")
summary = summary(token, string)
summary
string
View(df)
string
for (x in 3:nrow(df)) {
string = glue("{string}{df[x,4]}")
}
source_python("api_clients/aa_summarization.py")
if (sum(df[,5]) <= 2048) {
summary = summary(token, string)
}
summary
string
summary
document = string
summary = summary(token, document)
source_python("api_clients/aa_summarization.py")
document = string
summary = summary(token, document)
summary
source_python("api_clients/aa_summarization.py")
document = string
summary = summary(token, document)
summary
summary
runApp()
shiny::runApp()
x = "0.wav"
x = typeof("www/0.wav")
typeof("www/0.wav")
str_detect("www/0.wav", ".pdf", negate = FALSE)
library(stringr)
str_detect("www/0.wav", ".pdf", negate = FALSE)
library(glue)
library(glue)
library(DT)
library(pdftools)
shiny::runApp()
renv::status()
renv::snapshot()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
