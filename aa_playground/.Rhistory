reticulate::py_last_error()
completion(token, prompt, model, stop_sequences, maximum_tokens, best_of, temperature, top_k, top_p, presence_penalty, frequency_penalty)
maximum_tokens = 33
completion(token, prompt, model, stop_sequences, maximum_tokens, best_of, temperature, top_k, top_p, presence_penalty, frequency_penalty)
typeof(maximum_tokens)
maximum_tokens = as.numeric(33)
typeof(maximum_tokens)
maximum_tokens = as.integer(33)
typeof(maximum_tokens)
best_of = 1
temperature = 0
top_k = 0
top_p = 0
presence_penalty = 0
frequency_penalty = 0
completion(token, prompt, model, stop_sequences, maximum_tokens, best_of, temperature, top_k, top_p, presence_penalty, frequency_penalty)
maximum_tokens = as.integer(33)
typeof(maximum_tokens)
best_of = as.integer(1)
temperature = 0
top_k = as.integer(0)
top_p = 0
presence_penalty = 0
frequency_penalty = 0
completion(token, prompt, model, stop_sequences, maximum_tokens, best_of, temperature, top_k, top_p, presence_penalty, frequency_penalty)
completion(token, prompt, model, stop_sequences, maximum_tokens, best_of, temperature, top_k, top_p, presence_penalty, frequency_penalty)
best_of = as.integer(0)
completion(token, prompt, model, stop_sequences, maximum_tokens, best_of, temperature, top_k, top_p, presence_penalty, frequency_penalty)
best_of = as.integer(5)
temperature = 0
top_k = as.integer(0)
top_p = 0
presence_penalty = 0
frequency_penalty = 0
completion(token, prompt, model, stop_sequences, maximum_tokens, best_of, temperature, top_k, top_p, presence_penalty, frequency_penalty)
best_of = as.integer(2)
temperature = 0
top_k = as.integer(0)
top_p = 0
presence_penalty = 0
frequency_penalty = 0
completion(token, prompt, model, stop_sequences, maximum_tokens, best_of, temperature, top_k, top_p, presence_penalty, frequency_penalty)
best_of = as.integer(1)
temperature = 0
top_k = as.integer(0)
top_p = 0
presence_penalty = 0
frequency_penalty = 0
completion(token, prompt, model, stop_sequences, maximum_tokens, best_of, temperature, top_k, top_p, presence_penalty, frequency_penalty)
x = getwd()
source_python("aa_client.py")
py_run_file(glue("{x}/aa_client.py"))
prompt = "How are you"
model = "luminous-base"
stop_sequences ="###"
maximum_tokens = as.integer(33)
typeof(maximum_tokens)
best_of = as.integer(1)
temperature = 0
n = as.integer(0)
top_k = as.integer(0)
top_p = 0
presence_penalty = 0
frequency_penalty = 0
completion(token, prompt, model, stop_sequences, maximum_tokens, best_of, temperature, top_k, top_p, presence_penalty, frequency_penalty, n)
reticulate::py_last_error()
prompt = "How are you"
model = "luminous-base"
stop_sequences ="###"
maximum_tokens = as.integer(33)
typeof(maximum_tokens)
best_of = as.integer(2)
temperature = 0
n = as.integer(1)
top_k = as.integer(0)
top_p = 0
presence_penalty = 0
frequency_penalty = 0
completion(token, prompt, model, stop_sequences, maximum_tokens, best_of, temperature, top_k, top_p, presence_penalty, frequency_penalty, n)
completion(token, prompt, model, stop_sequences, maximum_tokens, best_of, temperature, top_k, top_p, presence_penalty, frequency_penalty, n)
list = aa_completion(token = token,
prompt = "Q: How are you?",
model = "luminous-base",
browser(),
maximum_tokens = 1,
best_of = 2)
token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo0MjcyLCJ0b2tlbl9pZCI6MjgxMX0.k1PwaELDM-EKCWq9gPwkgtWA6bdo50gzoFb8Q3lOobk"
list = aa_completion(token = token,
prompt = "Q: How are you?",
model = "luminous-base",
maximum_tokens = 1,
best_of = 2)
$ deactivate
$ deactivate
deactivate
list = aa_completion(token = token,
prompt = "Q: How are you?",
model = "luminous-base",
maximum_tokens = 1,
best_of = 2)
list
list = aa_completion(token = token,
prompt = "Q: How are you?",
model = "luminous-base",
stop_sequences  ="###",
maximum_tokens = 1,
best_of = 2)
list = aa_completion(token = token,
prompt = "Q: How are you?",
model = "luminous-base",
stop_sequences  = c("###"),
maximum_tokens = 1,
best_of = 2)
text = completion(token, prompt, model, stop_sequences, maximum_tokens, best_of, temperature, top_k, top_p, presence_penalty, frequency_penalty, n)
n = input$slider_bestof
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
reticulate::py_last_error()
runApp()
runApp()
library(reticulate)
x = getwd()
source_python("aa_client.py")
py_run_file(glue("{x}/aa_client.py"))
prompt = "How are you"
model = "luminous-base"
stop_sequences ="###"
maximum_tokens = as.integer(33)
typeof(maximum_tokens)
best_of = as.integer(2)
temperature = 0
n = as.integer(1)
top_k = as.integer(0)
top_p = 0
presence_penalty = 0
frequency_penalty = 0
text = completion(token, prompt, model, stop_sequences, maximum_tokens, best_of, temperature, top_k, top_p, presence_penalty, frequency_penalty, n)
text
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test = "Q: How are you?
###
A:"
prompt = gsub("[\r\n]", "", test)input$text_prompt
prompt = gsub("[\r\n]", "", test)
prompt
test = "Q: How are you?
###
A:"
test
runApp()
runApp()
runApp()
runApp()
text ="Q: what is love?
###
A:"
text
prompt = gsub("[\r\n]", "", text)
prompt
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex()
install.packages("tinytex")
install.packages("tinytex")
tinytex::tlmgr_update()
options(tinytex.verbose = TRUE)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
tinytex::install_tinytex()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df = data.frame(Parameter_name, Parameter_setting)
first_column = c("Model","Max tokens","Best of","Temperature","Top k","Top p","Presency penalty","Frequency penalty")
scond_column = c()
df = data.frame(first_column, scond_column)
df = data.frame(first_column)
df
first_column = c("Model","Max tokens","Best of","Temperature","Top k","Top p","Presency penalty","Frequency penalty")
scond_column = c(input$select_model,as.integer(input$num_maxtoken),as.integer(input$slider_bestof),input$slider_temperature,
as.integer(input$slider_topk),input$slider_topp,input$slider_presence,input$slider_frequency)
df = data.frame(first_column)
runApp()
runApp()
runApp()
shiny::runApp()
library(reticulate)
runApp()
runApp()
runApp()
runApp()
model_price = matrix(c(0.006, 0.009, 0.035,
0.0075, 0.01125, 0.04375
), ncol=1, byrow=TRUE)
model_price
colnames(model_price) = c('price per 1.000 token')
rownames(model_price) <- c('luminous-base','luminous-extended','luminous-supreme',
'luminous-base-control','luminous-extended-control','luminous-supreme-control')
task_factor = matrix(c(1.0, 1.1, 1.3,
1.1, 1.1, NULL
), ncol=2, byrow=TRUE)
task_factor
task_factor = as.table(task_factor)
colnames(task_factor) = c('input','output')
rownames(task_factor) = c('complete','evaluate','embed')
task_factor
model_price
task_factor = cbind(
c(1.0, 1.1, 1.3),
c(1.1, 1.1, NULL)
)
task_factor
task_factor = cbind(
c(1.0, 1.1, 1.3),
c(1.1, 1.1, "")
)
task_factor
task_factor = as.table(cbind(
c(1.0, 1.1, 1.3),
c(1.1, 1.1, "")
))
task_factor
task_factor = as.table(task_factor)
colnames(task_factor) = c('input','output')
rownames(task_factor) = c('complete','evaluate','embed')
task_factor
runApp()
shiny::runApp()
py_install("aleph-alpha-client")
runApp()
runApp()
py_install("Jinja2")
runApp()
library(reticulate)
source_python("api_clients/aa_client.py")
source_python("api_clients/aa_summarization.py")
py_install("Jinja2")
source_python("api_clients/aa_summarization.py")
install.packages("jinjar")
library(jinjar)
runApp()
reticulate::py_last_error()
runApp()
runApp()
runApp()
runApp()
reticulate::py_last_error()
# install.packages("fresh")
# bslib::bs_theme_preview()
detach("package:alephAlphaClient", unload = TRUE)
#detach("package:alephAlphaClient", unload = TRUE)
library(shiny)
runApp()
runApp()
runApp()
print(sys.path)
reticulate::repl_python()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
source_python("api_clients/aa_client.py")
test = source_python("api_clients/aa_client.py")
reticulate::py_last_error()
runApp()
reticulate::repl_python()
runApp()
runApp()
reticulate::repl_python()
runApp()
runApp()
runApp()
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
aa = import("aleph_alpha_client")
reticulate::py_last_error()
aa = import("aleph-alpha-client")
reticulate::py_last_error()
py_install("aleph-alpha-client")
aa = import("aleph-alpha-client")
aa = import("os")
os.list
os$listdir(".")
os = import("os")
os$listdir(".")
py_run_file(glue("api_clients/aa_client.py"))
reticulate::py_last_error()
py_install("aleph-alpha-client")
system("pip install git@github.com:Aleph-Alpha/aleph-alpha-client.git")
system("https://github.com/Aleph-Alpha/aleph-alpha-client.git")
system("pip install https://github.com/Aleph-Alpha/aleph-alpha-client.git")
system("pip install gh repo clone Aleph-Alpha/aleph-alpha-client")
repl_python()
reticulate::repl_python()
repl_python()
# Communication with aleph alpha compute center for completion job------------
rawoutput <- eventReactive(input$button1,{
print("Running API request.")
source_python("api_clients/aa_client.py")
py_run_file(glue("api_clients/aa_client.py"))
prompt = input$text_prompt
model = input$select_model
stop_sequences = "###"
maximum_tokens = as.integer(input$num_maxtoken)
n = as.integer(input$slider_bestof)
if (n == 1) { n = 2 } else {}
best_of = as.integer(n)
n = as.integer(1)
temperature = input$slider_temperature
top_k = as.integer(input$slider_topk)
top_p = input$slider_topp
presence_penalty = input$slider_presence
frequency_penalty = input$slider_frequency
text = completion(token, prompt, model, stop_sequences, maximum_tokens, best_of, temperature, top_k, top_p, presence_penalty, frequency_penalty, n)
return(text)
})
quit
import("os")
runApp()
runApp()
reticulate::repl_python()
runApp()
reticulate::py_last_error()
runApp()
reticulate::repl_python()
shiny::runApp()
reticulate::py_last_error()
py_config()
remotes::install_github("rstudio/reticulate")
py_config()
runApp()
reticulate::repl_python()
print("Running API request.")
source_python("api_clients/aa_client.py")
py_install("aleph-alpha-client")
py_install("Jinja2")
print("Running API request.")
source_python("api_clients/aa_client.py")
install.packages("devtools")
devtools::install_github("oscarkjell/text")
library(text)
library(reticulate)
# Install text required python packages in a conda environment (with defaults).
text::textrpp_install()
devtools::install_github("Aleph-Alpha/aleph-alpha-client")
devtools::install_github("Aleph-Alpha/aleph-alpha-client")
py_install("os")
py_install("os")
library(reticulate)
print("Running API request.")
source_python("api_clients/aa_client.py")
source_python("api_clients/aa_client.py")
reticulate::py_last_error()
system2(reticulate::py_exe(), c("-m", "pip", "uninstall", "aleph-alpha-client">))
system2(reticulate::py_exe(), c("-m", "pip", "uninstall", "aleph-alpha-client"))
py_install("aleph-alpha-client")
system2(reticulate::py_exe(), c("-m", "pip", "uninstall", "aleph-alpha-client"))
system2(reticulate::py_exe(), c("-m", "pip", "uninstall", "Jinja2"))
py_install("Jinja2")
system2(reticulate::py_exe(), c("-m", "pip", "uninstall", "Jinja2"))
use_python("/Users/lilian.do-khac/.virtualenvs/r-reticulate/lib/python3.11/site-packages (3.2.4)")
use_python("/Users/lilian.do-khac/.virtualenvs/r-reticulate/lib/python3.11")
#detach("package:alephAlphaClient", unload = TRUE)
library(shiny)
library(bslib)
library(thematic)
library(reticulate)
library(TheOpenAIR)
library(glue)
library(DT)
library(pdftools)
library(jinjar)
py_install("aleph-alpha-client")
py_install("Jinja2")
use_python("/Users/lilian.do-khac/.virtualenvs/r-reticulate/lib/python3.11")
use_python("/Users/lilian.do-khac/.pyenv/versions/3.11.4")
use_python("/Users/lilian.do-khac/.virtualenvs/r-reticulate/lib/python3.11")
library(reticulate)
detach("package:reticulate", unload = TRUE)
detach("package:TheOpenAIR", unload = TRUE)
library(reticulate)
library(reticulate)
install.packages("reticulate")
install.packages("reticulate")
library(reticulate)
use_python("/usr/local/bin/python")
install.packages("reticulate")
install.packages("reticulate")
py_install("aleph-alpha-client")
library(reticulate)
py_install("aleph-alpha-client")
py_install("Jinja2")
#detach("package:reticulate", unload = TRUE)
library(shiny)
library(bslib)
library(thematic)
library(reticulate)
library(TheOpenAIR)
library(glue)
library(DT)
library(pdftools)
runApp()
reticulate::py_last_error()
py_install("aleph-alpha-client")
#
runApp()
runApp()
reticulate::py_last_error()
runApp()
#detach("package:reticulate", unload = TRUE)
library(shiny)
library(bslib)
library(thematic)
library(reticulate)
library(TheOpenAIR)
library(glue)
library(DT)
library(pdftools)
#library(jinjar)
use_python("/Users/lilian.do-khac/.pyenv/versions/3.11.4/bin/python")
os <- import("os")
os <- import("aleph_alpha_client")
os <- import("aleph_alpha_client")
runApp()
runApp()
runApp()
runApp()
runApp()
